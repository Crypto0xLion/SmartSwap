"use strict";(self.webpackChunksmardex_web=self.webpackChunksmardex_web||[]).push([[4882],{782:function(e,t,r){r.d(t,{XR:function(){return n},tJ:function(){return a}});const n=e=>(t,r,n)=>{const o=n.subscribe;n.subscribe=(e,t,r)=>{let i=e;if(t){const o=(null==r?void 0:r.equalityFn)||Object.is;let a=e(n.getState());i=r=>{const n=e(r);if(!o(a,n)){const e=a;t(a=n,e)}},(null==r?void 0:r.fireImmediately)&&t(a,a)}return o(i)};return e(t,r,n)};function o(e,t){let r;try{r=e()}catch(e){return}return{getItem:e=>{var n;const o=e=>null===e?null:JSON.parse(e,null==t?void 0:t.reviver),i=null!=(n=r.getItem(e))?n:null;return i instanceof Promise?i.then(o):o(i)},setItem:(e,n)=>r.setItem(e,JSON.stringify(n,null==t?void 0:t.replacer)),removeItem:e=>r.removeItem(e)}}const i=e=>t=>{try{const r=e(t);return r instanceof Promise?r:{then(e){return i(e)(r)},catch(e){return this}}}catch(e){return{then(e){return this},catch(t){return i(t)(e)}}}},a=(e,t)=>"getStorage"in t||"serialize"in t||"deserialize"in t?(console.warn("[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead."),((e,t)=>(r,n,o)=>{let a={getStorage:()=>localStorage,serialize:JSON.stringify,deserialize:JSON.parse,partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},s=!1;const l=new Set,c=new Set;let u;try{u=a.getStorage()}catch(e){}if(!u)return e(((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${a.name}', the given storage is currently unavailable.`),r(...e)}),n,o);const d=i(a.serialize),f=()=>{const e=a.partialize({...n()});let t;const r=d({state:e,version:a.version}).then((e=>u.setItem(a.name,e))).catch((e=>{t=e}));if(t)throw t;return r},g=o.setState;o.setState=(e,t)=>{g(e,t),f()};const m=e(((...e)=>{r(...e),f()}),n,o);let h;const v=()=>{var e;if(!u)return;s=!1,l.forEach((e=>e(n())));const t=(null==(e=a.onRehydrateStorage)?void 0:e.call(a,n()))||void 0;return i(u.getItem.bind(u))(a.name).then((e=>{if(e)return a.deserialize(e)})).then((e=>{if(e){if("number"!=typeof e.version||e.version===a.version)return e.state;if(a.migrate)return a.migrate(e.state,e.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}})).then((e=>{var t;return h=a.merge(e,null!=(t=n())?t:m),r(h,!0),f()})).then((()=>{null==t||t(h,void 0),s=!0,c.forEach((e=>e(h)))})).catch((e=>{null==t||t(void 0,e)}))};return o.persist={setOptions:e=>{a={...a,...e},e.getStorage&&(u=e.getStorage())},clearStorage:()=>{null==u||u.removeItem(a.name)},getOptions:()=>a,rehydrate:()=>v(),hasHydrated:()=>s,onHydrate:e=>(l.add(e),()=>{l.delete(e)}),onFinishHydration:e=>(c.add(e),()=>{c.delete(e)})},v(),h||m})(e,t)):((e,t)=>(r,n,a)=>{let s={storage:o((()=>localStorage)),partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},l=!1;const c=new Set,u=new Set;let d=s.storage;if(!d)return e(((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${s.name}', the given storage is currently unavailable.`),r(...e)}),n,a);const f=()=>{const e=s.partialize({...n()});return d.setItem(s.name,{state:e,version:s.version})},g=a.setState;a.setState=(e,t)=>{g(e,t),f()};const m=e(((...e)=>{r(...e),f()}),n,a);let h;const v=()=>{var e,t;if(!d)return;l=!1,c.forEach((e=>{var t;return e(null!=(t=n())?t:m)}));const o=(null==(t=s.onRehydrateStorage)?void 0:t.call(s,null!=(e=n())?e:m))||void 0;return i(d.getItem.bind(d))(s.name).then((e=>{if(e){if("number"!=typeof e.version||e.version===s.version)return e.state;if(s.migrate)return s.migrate(e.state,e.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}})).then((e=>{var t;return h=s.merge(e,null!=(t=n())?t:m),r(h,!0),f()})).then((()=>{null==o||o(h,void 0),h=n(),l=!0,u.forEach((e=>e(h)))})).catch((e=>{null==o||o(void 0,e)}))};return a.persist={setOptions:e=>{s={...s,...e},e.storage&&(d=e.storage)},clearStorage:()=>{null==d||d.removeItem(s.name)},getOptions:()=>s,rehydrate:()=>v(),hasHydrated:()=>l,onHydrate:e=>(c.add(e),()=>{c.delete(e)}),onFinishHydration:e=>(u.add(e),()=>{u.delete(e)})},s.skipHydration||v(),h||m})(e,t)},76248:function(e,t,r){function n(e,t){if(Object.is(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;if(e instanceof Map&&t instanceof Map){if(e.size!==t.size)return!1;for(const[r,n]of e)if(!Object.is(n,t.get(r)))return!1;return!0}if(e instanceof Set&&t instanceof Set){if(e.size!==t.size)return!1;for(const r of e)if(!t.has(r))return!1;return!0}const r=Object.keys(e);if(r.length!==Object.keys(t).length)return!1;for(let n=0;n<r.length;n++)if(!Object.prototype.hasOwnProperty.call(t,r[n])||!Object.is(e[r[n]],t[r[n]]))return!1;return!0}r.d(t,{X:function(){return n}})},43973:function(e,t,r){r.d(t,{M:function(){return o}});const n=e=>{let t;const r=new Set,n=(e,n)=>{const o="function"==typeof e?e(t):e;if(!Object.is(o,t)){const e=t;t=(null!=n?n:"object"!=typeof o)?o:Object.assign({},t,o),r.forEach((r=>r(t,e)))}},o=()=>t,i={setState:n,getState:o,subscribe:e=>(r.add(e),()=>r.delete(e)),destroy:()=>{console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."),r.clear()}};return t=e(n,o,i),i},o=e=>e?n(e):n}}]);